/*************/
/* Based on a template by Oren Ish-Shalom */
/*************/


/*************/
/* IMPORTS */
/*************/

import java_cup.runtime.*;
import ast.*;
import java.util.List;
import java.util.LinkedList;

parser code
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}

	// Override default error reporting in parser
	public void report_error(String message, Object info)
	{
	    System.err.print("Syntax error at line " + lexer.getLine() + " of input. Parser\n");
		System.exit(1);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
    try {
	s = lexer.next_token();
	// System.out.print(s.sym);
	// System.out.print("[");
	// System.out.print(lexer.getLine());
	// System.out.print(":");
	// System.out.print(lexer.getCharPos());
	// System.out.print("] ");
	// System.out.print(sym.terminalNames[s.sym]);
	// if (s.value != null)
	// {
	//	System.out.print("( ");
	//	System.out.print(s.value);
	//	System.out.print(" )");
	// }
	// System.out.print("\n");
	return s;
     } catch (java.lang.Error e) {
         System.err.print("Syntax error at line " + lexer.getLine() + " of input. Lexer\n");
         System.exit(1);
         return null;
     }
:};

/*************/
/* TERMINALS */
/*************/
// TODO EX4 - fill with terminals
// E.g
// terminal PLUS, MINUS, MULT, DIV;

terminal PUBLIC;

/*****************/
/* NON TERMINALS */
/*****************/
// TODO EX4 - fill with non terminals
// E.g
// non terminal Expr expr;

non terminal prog;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
// TODO EX4 - fill with precedence (lowest line has higher precedence)
// E.g
// precedence PLUS, MINUS;
// precedence DIV, MULT;

/************************/
/* INITIAL NON TERMINAL */
/************************/
start with prog;

/********************/
/* PRODUCTION RULES */
/********************/
// TODO EX4 - fill with production rules
// E.g
// expr ::= expr:e1 PLUS term:e2 		{: RESULT = new AddExpr(e1, e2); :}
//            | expr:e1 MINUS term:e2	{: RESULT = new SubtractExpr(e1, e2); :}
//            | term:e					{: RESULT = e; :}
//   ;


prog            ::=     ;